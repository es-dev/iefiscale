#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace WcfService.Assemblers
{
	using Telerik.OpenAccess;
	using WcfService.Dto;
	using WcfService.Converters;
	using DataLayer;
	using System;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.Serialization;

			
	public partial interface IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    TDto Assemble(TEntity entity);
	    TEntity Assemble(TEntity entity, TDto dto);
	
	    IEnumerable<TDto> Assemble(IEnumerable<TEntity> entityList);
	    IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList);
	}
	
	public abstract class Assembler<TDto, TEntity> : IAssembler<TDto, TEntity>
	    where TEntity : class
	{
	    public abstract TDto Assemble(TEntity domainEntity);
	    public abstract TEntity Assemble(TEntity entity, TDto dto);
	
	    public void AssembleNavigational(TEntity entity, TDto dto)
	    {
	    	this.AssembleReferences(entity, dto);
	    	this.AssembleCollections(entity, dto);
	    }
	
	    public abstract void AssembleReferences(TEntity entity, TDto dto);
	    public abstract void AssembleCollections(TEntity entity, TDto dto);
	
	
	    public virtual IEnumerable<TDto> Assemble(IEnumerable<TEntity> domainEntityList)
	    {
	        List<TDto> dtos = Activator.CreateInstance<List<TDto>>();
	        foreach (TEntity domainEntity in domainEntityList)
	        {
	            dtos.Add(Assemble(domainEntity));
	        }
	        return dtos;
	    }
	
	    public virtual IEnumerable<TEntity> Assemble(IEnumerable<TDto> dtoList)
	    {
	        List<TEntity> domainEntities = Activator.CreateInstance<List<TEntity>>();
	        foreach (TDto dto in dtoList)
	        {
	            domainEntities.Add(Assemble(null, dto));
	        }
	        return domainEntities;
	    }
	}
	
	public partial interface IStudioCommercialeAssembler : IAssembler<StudioCommercialeDto, StudioCommerciale>
	{ 
	
	}
	
	public partial class StudioCommercialeAssemblerBase : Assembler<StudioCommercialeDto, StudioCommerciale>
	{
		/// <summary>
	    /// Invoked after the StudioCommercialeDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="StudioCommercialeDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(StudioCommercialeDto dto);
	
		/// <summary>
	    /// Invoked after the StudioCommerciale instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="StudioCommerciale"/> instance.</param>
		partial void OnEntityAssembled(StudioCommerciale entity);
		
	    public override StudioCommerciale Assemble(StudioCommerciale entity, StudioCommercialeDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new StudioCommerciale();
	        }
			
			entity.Id = dto.Id;
			entity.Denominazione = dto.Denominazione;
			entity.TipoSoftwareContabilita = dto.TipoSoftwareContabilita;
			entity.PartitaIVA = dto.PartitaIVA;
			entity.Indirizzo = dto.Indirizzo;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Cap = dto.Cap;
			entity.Email = dto.Email;
			entity.Telefono = dto.Telefono;
			entity.Fax = dto.Fax;
			entity.CodiceCatastale = dto.CodiceCatastale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override StudioCommercialeDto Assemble(StudioCommerciale entity)
	    {
	        StudioCommercialeDto dto = new StudioCommercialeDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Denominazione = entity.Denominazione;
			dto.TipoSoftwareContabilita = entity.TipoSoftwareContabilita;
			dto.PartitaIVA = entity.PartitaIVA;
			dto.Indirizzo = entity.Indirizzo;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Cap = entity.Cap;
			dto.Email = entity.Email;
			dto.Telefono = entity.Telefono;
			dto.Fax = entity.Fax;
			dto.CodiceCatastale = entity.CodiceCatastale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(StudioCommerciale entity, StudioCommercialeDto dto)
	    {
	    }
	
	    public override void AssembleCollections(StudioCommerciale entity, StudioCommercialeDto dto)
	    {
			AccountAssembler accountAssembler = new AccountAssembler();

			dto.Accounts = new List<AccountDto>();
			foreach (Account item in entity.Accounts)
			{
				var dtoItem = accountAssembler.Assemble(item);
				dtoItem.StudioCommerciale = dto;
				dto.Accounts.Add(dtoItem);
			}

			AziendaAssembler aziendaAssembler = new AziendaAssembler();

			dto.Aziendas = new List<AziendaDto>();
			foreach (Azienda item in entity.Aziendas)
			{
				var dtoItem = aziendaAssembler.Assemble(item);
				dtoItem.StudioCommerciale = dto;
				dto.Aziendas.Add(dtoItem);
			}

			AnagraficaAziendaAssembler anagraficaAziendaAssembler = new AnagraficaAziendaAssembler();

			dto.AnagraficaAziendas = new List<AnagraficaAziendaDto>();
			foreach (AnagraficaAzienda item in entity.AnagraficaAziendas)
			{
				var dtoItem = anagraficaAziendaAssembler.Assemble(item);
				dtoItem.StudioCommerciale = dto;
				dto.AnagraficaAziendas.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class StudioCommercialeAssembler : StudioCommercialeAssemblerBase, IStudioCommercialeAssembler
	{
	    
	}
	
	public partial interface IAziendaAssembler : IAssembler<AziendaDto, Azienda>
	{ 
	
	}
	
	public partial class AziendaAssemblerBase : Assembler<AziendaDto, Azienda>
	{
		/// <summary>
	    /// Invoked after the AziendaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AziendaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AziendaDto dto);
	
		/// <summary>
	    /// Invoked after the Azienda instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Azienda"/> instance.</param>
		partial void OnEntityAssembled(Azienda entity);
		
	    public override Azienda Assemble(Azienda entity, AziendaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Azienda();
	        }
			
			entity.Id = dto.Id;
			entity.TipoContabilita = dto.TipoContabilita;
			entity.TipoSoftwareFatturazione = dto.TipoSoftwareFatturazione;
			entity.IDAzienda = dto.IDAzienda;
			entity.StudioCommercialeId = dto.StudioCommercialeId;
			entity.AnagraficaAziendaId = dto.AnagraficaAziendaId;
			entity.MdbFile = dto.MdbFile;
			entity.UltimoAggiornamento = dto.UltimoAggiornamento;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AziendaDto Assemble(Azienda entity)
	    {
	        AziendaDto dto = new AziendaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.TipoContabilita = entity.TipoContabilita;
			dto.TipoSoftwareFatturazione = entity.TipoSoftwareFatturazione;
			dto.IDAzienda = entity.IDAzienda;
			dto.StudioCommercialeId = entity.StudioCommercialeId;
			dto.AnagraficaAziendaId = entity.AnagraficaAziendaId;
			dto.MdbFile = entity.MdbFile;
			dto.UltimoAggiornamento = entity.UltimoAggiornamento;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Azienda entity, AziendaDto dto)
	    {
			StudioCommercialeAssembler studioCommercialeAssembler = new StudioCommercialeAssembler();
			dto.StudioCommerciale = studioCommercialeAssembler.Assemble(entity.StudioCommerciale);

			AnagraficaAziendaAssembler anagraficaAziendaAssembler = new AnagraficaAziendaAssembler();
			dto.AnagraficaAzienda = anagraficaAziendaAssembler.Assemble(entity.AnagraficaAzienda);

	    }
	
	    public override void AssembleCollections(Azienda entity, AziendaDto dto)
	    {
			AccountAssembler accountAssembler = new AccountAssembler();

			dto.Accounts = new List<AccountDto>();
			foreach (Account item in entity.Accounts)
			{
				var dtoItem = accountAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Accounts.Add(dtoItem);
			}

			ContabilitaAssembler contabilitaAssembler = new ContabilitaAssembler();

			dto.Contabilitas = new List<ContabilitaDto>();
			foreach (Contabilita item in entity.Contabilitas)
			{
				var dtoItem = contabilitaAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Contabilitas.Add(dtoItem);
			}

			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.Azienda = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AziendaAssembler : AziendaAssemblerBase, IAziendaAssembler
	{
	    
	}
	
	public partial interface IContabilitaAssembler : IAssembler<ContabilitaDto, Contabilita>
	{ 
	
	}
	
	public partial class ContabilitaAssemblerBase : Assembler<ContabilitaDto, Contabilita>
	{
		/// <summary>
	    /// Invoked after the ContabilitaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ContabilitaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ContabilitaDto dto);
	
		/// <summary>
	    /// Invoked after the Contabilita instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Contabilita"/> instance.</param>
		partial void OnEntityAssembled(Contabilita entity);
		
	    public override Contabilita Assemble(Contabilita entity, ContabilitaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Contabilita();
	        }
			
			entity.Id = dto.Id;
			entity.Anno = dto.Anno;
			entity.Tipo = dto.Tipo;
			entity.AziendaId = dto.AziendaId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ContabilitaDto Assemble(Contabilita entity)
	    {
	        ContabilitaDto dto = new ContabilitaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Anno = entity.Anno;
			dto.Tipo = entity.Tipo;
			dto.AziendaId = entity.AziendaId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Contabilita entity, ContabilitaDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Contabilita entity, ContabilitaDto dto)
	    {
			ComunicazioneAssembler comunicazioneAssembler = new ComunicazioneAssembler();

			dto.Comunicaziones = new List<ComunicazioneDto>();
			foreach (Comunicazione item in entity.Comunicaziones)
			{
				var dtoItem = comunicazioneAssembler.Assemble(item);
				dtoItem.Contabilita = dto;
				dto.Comunicaziones.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ContabilitaAssembler : ContabilitaAssemblerBase, IContabilitaAssembler
	{
	    
	}
	
	public partial interface IComunicazioneAssembler : IAssembler<ComunicazioneDto, Comunicazione>
	{ 
	
	}
	
	public partial class ComunicazioneAssemblerBase : Assembler<ComunicazioneDto, Comunicazione>
	{
		/// <summary>
	    /// Invoked after the ComunicazioneDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ComunicazioneDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ComunicazioneDto dto);
	
		/// <summary>
	    /// Invoked after the Comunicazione instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Comunicazione"/> instance.</param>
		partial void OnEntityAssembled(Comunicazione entity);
		
	    public override Comunicazione Assemble(Comunicazione entity, ComunicazioneDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Comunicazione();
	        }
			
			entity.Id = dto.Id;
			entity.ContabilitaId = dto.ContabilitaId;
			entity.Numero = dto.Numero;
			entity.ScadenzaIVA = dto.ScadenzaIVA;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ComunicazioneDto Assemble(Comunicazione entity)
	    {
	        ComunicazioneDto dto = new ComunicazioneDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ContabilitaId = entity.ContabilitaId;
			dto.Numero = entity.Numero;
			dto.ScadenzaIVA = entity.ScadenzaIVA;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Comunicazione entity, ComunicazioneDto dto)
	    {
			ContabilitaAssembler contabilitaAssembler = new ContabilitaAssembler();
			dto.Contabilita = contabilitaAssembler.Assemble(entity.Contabilita);

	    }
	
	    public override void AssembleCollections(Comunicazione entity, ComunicazioneDto dto)
	    {
			ExportAssembler exportAssembler = new ExportAssembler();

			dto.Exports = new List<ExportDto>();
			foreach (Export item in entity.Exports)
			{
				var dtoItem = exportAssembler.Assemble(item);
				dtoItem.Comunicazione = dto;
				dto.Exports.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ComunicazioneAssembler : ComunicazioneAssemblerBase, IComunicazioneAssembler
	{
	    
	}
	
	public partial interface IDocumentoAssembler : IAssembler<DocumentoDto, Documento>
	{ 
	
	}
	
	public partial class DocumentoAssemblerBase : Assembler<DocumentoDto, Documento>
	{
		/// <summary>
	    /// Invoked after the DocumentoDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="DocumentoDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(DocumentoDto dto);
	
		/// <summary>
	    /// Invoked after the Documento instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Documento"/> instance.</param>
		partial void OnEntityAssembled(Documento entity);
		
	    public override Documento Assemble(Documento entity, DocumentoDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Documento();
	        }
			
			entity.Id = dto.Id;
			entity.ExportId = dto.ExportId;
			entity.Tipo = dto.Tipo;
			entity.Data = dto.Data;
			entity.IDMovimento = dto.IDMovimento;
			entity.IDCausale = dto.IDCausale;
			entity.IDRegistroIVA = dto.IDRegistroIVA;
			entity.IDIVA = dto.IDIVA;
			entity.Totale = dto.Totale;
			entity.Imponibile = dto.Imponibile;
			entity.IVA = dto.IVA;
			entity.Numero = dto.Numero;
			entity.DataRegistrazione = dto.DataRegistrazione;
			entity.ClienteId = dto.ClienteId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override DocumentoDto Assemble(Documento entity)
	    {
	        DocumentoDto dto = new DocumentoDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ExportId = entity.ExportId;
			dto.Tipo = entity.Tipo;
			dto.Data = entity.Data;
			dto.IDMovimento = entity.IDMovimento;
			dto.IDCausale = entity.IDCausale;
			dto.IDRegistroIVA = entity.IDRegistroIVA;
			dto.IDIVA = entity.IDIVA;
			dto.Totale = entity.Totale;
			dto.Imponibile = entity.Imponibile;
			dto.IVA = entity.IVA;
			dto.Numero = entity.Numero;
			dto.DataRegistrazione = entity.DataRegistrazione;
			dto.ClienteId = entity.ClienteId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Documento entity, DocumentoDto dto)
	    {
			ExportAssembler exportAssembler = new ExportAssembler();
			dto.Export = exportAssembler.Assemble(entity.Export);

			ClienteAssembler clienteAssembler = new ClienteAssembler();
			dto.Cliente = clienteAssembler.Assemble(entity.Cliente);

	    }
	
	    public override void AssembleCollections(Documento entity, DocumentoDto dto)
	    {
	    }
	
	}
	
	
	public partial class DocumentoAssembler : DocumentoAssemblerBase, IDocumentoAssembler
	{
	    
	}
	
	public partial interface IAccountAssembler : IAssembler<AccountDto, Account>
	{ 
	
	}
	
	public partial class AccountAssemblerBase : Assembler<AccountDto, Account>
	{
		/// <summary>
	    /// Invoked after the AccountDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AccountDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AccountDto dto);
	
		/// <summary>
	    /// Invoked after the Account instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Account"/> instance.</param>
		partial void OnEntityAssembled(Account entity);
		
	    public override Account Assemble(Account entity, AccountDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Account();
	        }
			
			entity.Id = dto.Id;
			entity.StudioCommercialeId = dto.StudioCommercialeId;
			entity.AziendaId = dto.AziendaId;
			entity.Username = dto.Username;
			entity.Password = dto.Password;
			entity.Nickname = dto.Nickname;
			entity.Ruolo = dto.Ruolo;
			entity.Note = dto.Note;
			entity.Creazione = dto.Creazione;
			entity.Abilitato = dto.Abilitato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AccountDto Assemble(Account entity)
	    {
	        AccountDto dto = new AccountDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.StudioCommercialeId = entity.StudioCommercialeId;
			dto.AziendaId = entity.AziendaId;
			dto.Username = entity.Username;
			dto.Password = entity.Password;
			dto.Nickname = entity.Nickname;
			dto.Ruolo = entity.Ruolo;
			dto.Note = entity.Note;
			dto.Creazione = entity.Creazione;
			dto.Abilitato = entity.Abilitato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Account entity, AccountDto dto)
	    {
			StudioCommercialeAssembler studioCommercialeAssembler = new StudioCommercialeAssembler();
			dto.StudioCommerciale = studioCommercialeAssembler.Assemble(entity.StudioCommerciale);

			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

	    }
	
	    public override void AssembleCollections(Account entity, AccountDto dto)
	    {
	    }
	
	}
	
	
	public partial class AccountAssembler : AccountAssemblerBase, IAccountAssembler
	{
	    
	}
	
	public partial interface IImportAssembler : IAssembler<ImportDto, Import>
	{ 
	
	}
	
	public partial class ImportAssemblerBase : Assembler<ImportDto, Import>
	{
		/// <summary>
	    /// Invoked after the ImportDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ImportDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ImportDto dto);
	
		/// <summary>
	    /// Invoked after the Import instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Import"/> instance.</param>
		partial void OnEntityAssembled(Import entity);
		
	    public override Import Assemble(Import entity, ImportDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Import();
	        }
			
			entity.Id = dto.Id;
			entity.Data = dto.Data;
			entity.TXTMovimenti = dto.TXTMovimenti;
			entity.TXTClienti = dto.TXTClienti;
			entity.Stato = dto.Stato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ImportDto Assemble(Import entity)
	    {
	        ImportDto dto = new ImportDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.Data = entity.Data;
			dto.TXTMovimenti = entity.TXTMovimenti;
			dto.TXTClienti = entity.TXTClienti;
			dto.Stato = entity.Stato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Import entity, ImportDto dto)
	    {
			ExportAssembler exportAssembler = new ExportAssembler();
			dto.Export = exportAssembler.Assemble(entity.Export);

	    }
	
	    public override void AssembleCollections(Import entity, ImportDto dto)
	    {
	    }
	
	}
	
	
	public partial class ImportAssembler : ImportAssemblerBase, IImportAssembler
	{
	    
	}
	
	public partial interface IExportAssembler : IAssembler<ExportDto, Export>
	{ 
	
	}
	
	public partial class ExportAssemblerBase : Assembler<ExportDto, Export>
	{
		/// <summary>
	    /// Invoked after the ExportDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ExportDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ExportDto dto);
	
		/// <summary>
	    /// Invoked after the Export instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Export"/> instance.</param>
		partial void OnEntityAssembled(Export entity);
		
	    public override Export Assemble(Export entity, ExportDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Export();
	        }
			
			entity.Id = dto.Id;
			entity.ComunicazioneId = dto.ComunicazioneId;
			entity.Data = dto.Data;
			entity.Progressivo = dto.Progressivo;
			entity.XmlFile = dto.XmlFile;
			entity.Stato = dto.Stato;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ExportDto Assemble(Export entity)
	    {
	        ExportDto dto = new ExportDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ComunicazioneId = entity.ComunicazioneId;
			dto.Data = entity.Data;
			dto.Progressivo = entity.Progressivo;
			dto.XmlFile = entity.XmlFile;
			dto.Stato = entity.Stato;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Export entity, ExportDto dto)
	    {
			ComunicazioneAssembler comunicazioneAssembler = new ComunicazioneAssembler();
			dto.Comunicazione = comunicazioneAssembler.Assemble(entity.Comunicazione);

			ImportAssembler importAssembler = new ImportAssembler();
			dto.Import = importAssembler.Assemble(entity.Import);

	    }
	
	    public override void AssembleCollections(Export entity, ExportDto dto)
	    {
			DocumentoAssembler documentoAssembler = new DocumentoAssembler();

			dto.Documentos = new List<DocumentoDto>();
			foreach (Documento item in entity.Documentos)
			{
				var dtoItem = documentoAssembler.Assemble(item);
				dtoItem.Export = dto;
				dto.Documentos.Add(dtoItem);
			}

			CustomerAssembler customerAssembler = new CustomerAssembler();

			dto.Customers = new List<CustomerDto>();
			foreach (Customer item in entity.Customers)
			{
				var dtoItem = customerAssembler.Assemble(item);
				dtoItem.Export = dto;
				dto.Customers.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ExportAssembler : ExportAssemblerBase, IExportAssembler
	{
	    
	}
	
	public partial interface IAnagraficaAziendaAssembler : IAssembler<AnagraficaAziendaDto, AnagraficaAzienda>
	{ 
	
	}
	
	public partial class AnagraficaAziendaAssemblerBase : Assembler<AnagraficaAziendaDto, AnagraficaAzienda>
	{
		/// <summary>
	    /// Invoked after the AnagraficaAziendaDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="AnagraficaAziendaDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(AnagraficaAziendaDto dto);
	
		/// <summary>
	    /// Invoked after the AnagraficaAzienda instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="AnagraficaAzienda"/> instance.</param>
		partial void OnEntityAssembled(AnagraficaAzienda entity);
		
	    public override AnagraficaAzienda Assemble(AnagraficaAzienda entity, AnagraficaAziendaDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new AnagraficaAzienda();
	        }
			
			entity.Id = dto.Id;
			entity.StudioCommercialeId = dto.StudioCommercialeId;
			entity.RagioneSociale = dto.RagioneSociale;
			entity.CodiceFiscale = dto.CodiceFiscale;
			entity.PartitaIVA = dto.PartitaIVA;
			entity.Indirizzo = dto.Indirizzo;
			entity.Comune = dto.Comune;
			entity.Provincia = dto.Provincia;
			entity.Email = dto.Email;
			entity.Telefono = dto.Telefono;
			entity.Fax = dto.Fax;
			entity.Cap = dto.Cap;
			entity.CodiceCatastale = dto.CodiceCatastale;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override AnagraficaAziendaDto Assemble(AnagraficaAzienda entity)
	    {
	        AnagraficaAziendaDto dto = new AnagraficaAziendaDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.StudioCommercialeId = entity.StudioCommercialeId;
			dto.RagioneSociale = entity.RagioneSociale;
			dto.CodiceFiscale = entity.CodiceFiscale;
			dto.PartitaIVA = entity.PartitaIVA;
			dto.Indirizzo = entity.Indirizzo;
			dto.Comune = entity.Comune;
			dto.Provincia = entity.Provincia;
			dto.Email = entity.Email;
			dto.Telefono = entity.Telefono;
			dto.Fax = entity.Fax;
			dto.Cap = entity.Cap;
			dto.CodiceCatastale = entity.CodiceCatastale;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(AnagraficaAzienda entity, AnagraficaAziendaDto dto)
	    {
			StudioCommercialeAssembler studioCommercialeAssembler = new StudioCommercialeAssembler();
			dto.StudioCommerciale = studioCommercialeAssembler.Assemble(entity.StudioCommerciale);

	    }
	
	    public override void AssembleCollections(AnagraficaAzienda entity, AnagraficaAziendaDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();

			dto.Aziendas = new List<AziendaDto>();
			foreach (Azienda item in entity.Aziendas)
			{
				var dtoItem = aziendaAssembler.Assemble(item);
				dtoItem.AnagraficaAzienda = dto;
				dto.Aziendas.Add(dtoItem);
			}

			ClienteAssembler clienteAssembler = new ClienteAssembler();

			dto.Clientes = new List<ClienteDto>();
			foreach (Cliente item in entity.Clientes)
			{
				var dtoItem = clienteAssembler.Assemble(item);
				dtoItem.AnagraficaAzienda = dto;
				dto.Clientes.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class AnagraficaAziendaAssembler : AnagraficaAziendaAssemblerBase, IAnagraficaAziendaAssembler
	{
	    
	}
	
	public partial interface IClienteAssembler : IAssembler<ClienteDto, Cliente>
	{ 
	
	}
	
	public partial class ClienteAssemblerBase : Assembler<ClienteDto, Cliente>
	{
		/// <summary>
	    /// Invoked after the ClienteDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="ClienteDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(ClienteDto dto);
	
		/// <summary>
	    /// Invoked after the Cliente instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Cliente"/> instance.</param>
		partial void OnEntityAssembled(Cliente entity);
		
	    public override Cliente Assemble(Cliente entity, ClienteDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Cliente();
	        }
			
			entity.Id = dto.Id;
			entity.AziendaId = dto.AziendaId;
			entity.IDCliente = dto.IDCliente;
			entity.AnagraficaAziendaId = dto.AnagraficaAziendaId;
			entity.IDConto = dto.IDConto;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override ClienteDto Assemble(Cliente entity)
	    {
	        ClienteDto dto = new ClienteDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.AziendaId = entity.AziendaId;
			dto.IDCliente = entity.IDCliente;
			dto.AnagraficaAziendaId = entity.AnagraficaAziendaId;
			dto.IDConto = entity.IDConto;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Cliente entity, ClienteDto dto)
	    {
			AziendaAssembler aziendaAssembler = new AziendaAssembler();
			dto.Azienda = aziendaAssembler.Assemble(entity.Azienda);

			AnagraficaAziendaAssembler anagraficaAziendaAssembler = new AnagraficaAziendaAssembler();
			dto.AnagraficaAzienda = anagraficaAziendaAssembler.Assemble(entity.AnagraficaAzienda);

	    }
	
	    public override void AssembleCollections(Cliente entity, ClienteDto dto)
	    {
			CustomerAssembler customerAssembler = new CustomerAssembler();

			dto.Customers = new List<CustomerDto>();
			foreach (Customer item in entity.Customers)
			{
				var dtoItem = customerAssembler.Assemble(item);
				dtoItem.Cliente = dto;
				dto.Customers.Add(dtoItem);
			}

			DocumentoAssembler documentoAssembler = new DocumentoAssembler();

			dto.Documentos = new List<DocumentoDto>();
			foreach (Documento item in entity.Documentos)
			{
				var dtoItem = documentoAssembler.Assemble(item);
				dtoItem.Cliente = dto;
				dto.Documentos.Add(dtoItem);
			}

	    }
	
	}
	
	
	public partial class ClienteAssembler : ClienteAssemblerBase, IClienteAssembler
	{
	    
	}
	
	public partial interface ICustomerAssembler : IAssembler<CustomerDto, Customer>
	{ 
	
	}
	
	public partial class CustomerAssemblerBase : Assembler<CustomerDto, Customer>
	{
		/// <summary>
	    /// Invoked after the CustomerDto instance is assembled.
	    /// </summary>
	    /// <param name="dto"><see cref="CustomerDto"/> The Dto instance.</param>
		partial void OnDTOAssembled(CustomerDto dto);
	
		/// <summary>
	    /// Invoked after the Customer instance is assembled.
	    /// </summary>
	    /// <param name="entity">The <see cref="Customer"/> instance.</param>
		partial void OnEntityAssembled(Customer entity);
		
	    public override Customer Assemble(Customer entity, CustomerDto dto)
	    {
	        if (entity == null)
	        {
	            entity = new Customer();
	        }
			
			entity.Id = dto.Id;
			entity.ExportId = dto.ExportId;
			entity.ClienteId = dto.ClienteId;
	        this.OnEntityAssembled(entity);
	        return entity;
	    }
	
	    public override CustomerDto Assemble(Customer entity)
	    {
	        CustomerDto dto = new CustomerDto();
	        
			ObjectKey key = KeyUtility.Instance.Create(entity);
			dto.DtoKey = KeyUtility.Instance.Convert(key);
			dto.Id = entity.Id;
			dto.ExportId = entity.ExportId;
			dto.ClienteId = entity.ClienteId;
			this.OnDTOAssembled(dto); 
	        return dto;
	    }
	
	    public override void AssembleReferences(Customer entity, CustomerDto dto)
	    {
			ExportAssembler exportAssembler = new ExportAssembler();
			dto.Export = exportAssembler.Assemble(entity.Export);

			ClienteAssembler clienteAssembler = new ClienteAssembler();
			dto.Cliente = clienteAssembler.Assemble(entity.Cliente);

	    }
	
	    public override void AssembleCollections(Customer entity, CustomerDto dto)
	    {
	    }
	
	}
	
	
	public partial class CustomerAssembler : CustomerAssemblerBase, ICustomerAssembler
	{
	    
	}
}
#pragma warning restore 1591
